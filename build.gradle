/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.7/samples
 *
 * Generated by m30pm during project creation.
 */
plugins {
    id 'base'
}

def schemaFileName = "resume-schema.yaml"
def schemaSrcDir = "$projectDir/model/schema"
def schemaOutDir = "schema"
def schemaBuildDir = "$buildDir/$schemaOutDir"
def unifiedSchemaPath = "$schemaBuildDir/$schemaFileName"
def modelBuildFileName = "model.json"
def modelSrcDirName = "model/resume"
def modelSrcDir = "$projectDir/$modelSrcDirName"
def modelSrcExt = ".yaml"
def modelBuildDirName = "$modelSrcDirName"
def modelBuildDir = "$buildDir/$modelBuildDirName"
def modelBuildExt = ".json"
def querySrcFileName = "resume.adoc.njk"
def querySrcDirName = "views/"
def querySrcDir = "$projectDir/$querySrcDirName"
def queryBuildDirName = "$querySrcDirName"
def queryBuildDir = "$buildDir/$queryBuildDirName"
def queryBuildExt = ".adoc"

tasks.register('buildUnifiedSchema', Exec) {
    inputs.files(fileTree("$schemaSrcDir"))
        .withPropertyName('sourceFiles')
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$schemaOutDir"))
        .withPropertyName('outputDir')
    commandLine "bash", "-c", "gen-yaml $schemaSrcDir/$schemaFileName --mergeimports > $unifiedSchemaPath"
}

tasks.register('cleanupUnifiedSchema', Exec) {
    dependsOn(buildUnifiedSchema)
    inputs.files(fileTree("$schemaOutDir"))
        .withPropertyName('sourceFiles')
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$schemaOutDir"))
        .withPropertyName('outputDir')
    commandLine "yq", "-i", "del(.imports)", "$unifiedSchemaPath"
}

tasks.register('buildModel') {
    dependsOn(cleanupUnifiedSchema)
    inputs.files(fileTree("$modelSrcDir"))
    .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$modelBuildDir"))
    doLast {
        fileTree("$modelSrcDir").matching {
            include "**/*$modelSrcExt"
        }.each { file ->
            exec {
                commandLine "bash", "-c", "yq -o=json $file > $modelBuildDir/$file.name$modelBuildExt"
            }
        }
    }
}

tasks.register('validateModel') {
    dependsOn(buildModel)
    inputs.files(fileTree("$modelBuildDir"))
    .withPathSensitivity(PathSensitivity.ABSOLUTE)
    doLast {
        fileTree("$modelBuildDir").matching {
            include "*$modelBuildExt"
        }.each { file ->
            exec {
                commandLine "linkml-validate", "-s", "$schemaBuildDir/$schemaFileName", "$modelBuildDir/$file.name"
            }
        }
    }
}

tasks.register('buildView') {
    dependsOn(validateModel)
    inputs.files(fileTree("$modelBuildDir"))
        .withPathSensitivity(PathSensitivity.ABSOLUTE)
    outputs.dir(layout.buildDirectory.dir("$queryBuildDir"))
    doLast {
       fileTree("$modelBuildDir").matching {
           include "**/*$modelBuildExt"
       }.each { file ->
           exec {
               commandLine "bash", "-c", "npm exec -- nunjucks -d $file $querySrcDir/$querySrcFileName > $queryBuildDir/$file.name$queryBuildExt"
           }
       }
    }
}
